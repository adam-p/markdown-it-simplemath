/*! markdown-it-simplemath 1.0.0 https://github.com//adam-p/markdown-it-simplemath @license MIT */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.markdownitSimpleMath=e()}}(function(){return function e(n,r,o){function i(s,u){if(!r[s]){if(!n[s]){var f="function"==typeof require&&require;if(!u&&f)return f(s,!0);if(t)return t(s,!0);var p=new Error("Cannot find module '"+s+"'");throw p.code="MODULE_NOT_FOUND",p}var l=r[s]={exports:{}};n[s][0].call(l.exports,function(e){var r=n[s][1][e];return i(r?r:e)},l,l.exports,e,n,r,o)}return r[s].exports}for(var t="function"==typeof require&&require,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,n,r){"use strict";function o(e,n){var r,o,i,t,s,u,f,p=e.pos,l=!0,c=!0,a=e.posMax,d=e.md.utils.isWhiteSpace,h=e.md.utils.isPunctChar,m=e.md.utils.isMdAsciiPunct;return r=n>0?e.src.charCodeAt(n-1):32,p>=a&&(l=!1),i=p-n,o=a>p?e.src.charCodeAt(p):32,s=m(r)||h(String.fromCharCode(r)),f=m(o)||h(String.fromCharCode(o)),t=d(r),u=d(o),u?l=!1:f&&(t||s||(l=!1)),t?c=!1:s&&(u||f||(c=!1)),{can_open:l,can_close:c,delims:i}}function i(e,n){return function(r,i){var t,s,u,f,p,l=r.posMax,c=r.pos,a=r.src.slice(c,c+e.length);if(a!==e)return!1;if(i)return!1;if(u=o(r,c+e.length),t=u.delims,!u.can_open)return r.pos+=t,r.pending+=r.src.slice(c,r.pos),!0;for(r.pos=c+e.length;r.pos<l;){if(p=r.src.slice(r.pos,r.pos+n.length),p===n&&(u=o(r,r.pos+n.length),u.can_close)){s=!0;break}r.md.inline.skipToken(r)}return s?c+n.length===r.pos?(r.pos=c,!1):(r.posMax=r.pos,r.pos=c+n.length,f=r.push("math_inline","math",0),f.content=r.src.slice(r.pos,r.posMax),f.markup=e,r.pos=r.posMax+n.length,r.posMax=l,!0):(r.pos=c,!1)}}n.exports=function(e,n){var r="$",o="$";if(!n||!n.inlineRenderer)throw new Error("options.inlineRender is required");var t=function(e,r){return n.inlineRenderer(e[r].content)},s=i(r,o);e.inline.ruler.before("escape","math_inline",s),e.renderer.rules.math_inline=t}},{}]},{},[1])(1)});